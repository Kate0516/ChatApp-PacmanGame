{"version":3,"sources":["util/index.js","ChatPage/joinChatRoom.jsx","ChatPage/createChatRoom.jsx","ChatPage/default-group-chat.jpg","util/message.js","ChatPage/chatRooms.jsx","ChatPage/chatRoomList.jsx","ChatPage/userList/inviteFriend.jsx","ChatPage/userList/userList.jsx","ChatPage/ChatRoom/ChatHeader.jsx","ChatPage/ChatRoom/Message.jsx","ChatPage/ChatRoom/ChatBoard.jsx","ChatPage/mainView.jsx","Landing/landing.js","App.js","reportWebVitals.js","index.js"],"names":["urlPrefix","post","url","body","callback","authToken","console","warn","localStorage","getItem","$","ajax","type","dataType","headers","data","JSON","stringify","contentType","success","result","error","get","del","JoinChatRoom","props","useState","isModalVisible","setIsModalVisible","inputText","setInputText","resultText","setResultText","size","block","onClick","title","visible","onCancel","footer","required","value","placeholder","onChange","event","target","undefined","log","res","payload","map","chatRoom","chatroom_id","parseInt","chatroom_size","users","length","is_private","joinInfo","Invitee","newRoomList","chatRoomList","newRoom","push","setChatRoomList","CreateChatRoom","groupName","setGroupName","roomSize","setRoomSize","isPublic","setIsPublic","errorMessage","setErrormessage","clearInputFields","chatroom_name","currentUser","token","min","max","e","checked","style","color","msg","message","ChatRooms","chatroom","className","chatRoomId","chatRoomName","curRoom","currentRoom","roomId","roomName","setCurrentRoom","room","filter","setUserList","setCurrentUser","isAdmin","admins","includes","username","currentMessage","messages","setCurMsgList","handleOnClick","src","defaultPic","alt","width","ChatRoomList","useEffect","filteredChatRooms","chatroomList","userList","InviteFriend","userInfo","user","UserList","href","rel","User","handleBlock","info","index","padding","position","left","danger","right","bottom","ChatHeader","this","name","Button","variant","React","Component","Message","state","editing","editedMsg","setState","sender","time","TextField","defaultValue","saveEditedMsg","bind","authority","IconButton","sendEditReq","handleDelete","Alert","elevation","ChatBoard","scrollToBottom","messagesEnd","scrollIntoView","behavior","msgDest","messageInput","createRef","sendMessage","cookie","content","message_id","messageList","id","setRoomList","roomList","chatroomId","dest","deleteMessage","editMessage","float","clear","ref","ele","Snackbar","open","notification","on","autoHideDuration","onClose","setNotification","severity","fontSize","v","cleanOnEnter","onEnter","disabled","banned","MainView","ws","setWs","setMessages","loggedInUser","curUser","setCurUser","curMsgList","createWebSocket","WebSocket","window","location","hostname","port","setInterval","send","onopen","onerror","onclose","code","reason","wasClean","onmessage","parse","level","Date","toTimeString","substring","toDateString","forEach","editMsgList","delMsgList","setLoggedInUser","age","university","interest","chatRooms","interests","Landing","setItem","isLogginActive","container","rightSide","classList","add","remove","prevState","current","currentActive","history","containerRef","addUser","changeState","RightSide","Login","password","isLoggedIn","loginFunc","school","join","responseJSON","icon","Icon","Content","Header","htmlFor","Register","confirmPassword","errorMsg","register","pwd","confirmPwd","newUser","emsg","smsg","registerError","registerSuccess","App","useHistory","setHistory","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05eece96.chunk.js","sourcesContent":["import $ from 'jquery';\n\n// TODO: change this to \"\" in production\nconst urlPrefix = \"\";\n\nexport const post = (url, body, callback, authToken=\"\") => {\n    if (authToken === \"\") {\n        console.warn(\"authToken is '', should pass token\")\n        authToken = localStorage.getItem(\"auth\")\n    }\n\n    $.ajax({\n        url: urlPrefix + url,\n        type: 'POST',\n        dataType: 'json',\n        headers: {\n            'Authorization': \"Bearer \" + authToken,\n        },\n        data: JSON.stringify(body),\n        contentType: 'application/json; charset=utf-8',\n        success: function (result) {\n            callback(result)\n        },\n        error: function (result) {\n            callback(result)\n        }\n    });\n}\n\n\nexport const get = (url, callback, authToken = \"\") => {\n    if (authToken === \"\") {\n        console.warn(\"authToken is '', should pass token\")\n        authToken = localStorage.getItem(\"auth\")\n    }\n    $.ajax({\n        url: urlPrefix + url,\n        type: 'GET',\n        dataType: 'json',\n        headers: {\n            'Authorization': \"Bearer \" + authToken,\n        },\n        contentType: 'application/json; charset=utf-8',\n        success: function (result) {\n            callback(result)\n        },\n        error: function (result) {\n            callback(result)\n        }\n    });\n\n}\n\n\nexport const del = (url, callback, authToken=\"\") => {\n    if (authToken === \"\") {\n        console.warn(\"authToken is '', should pass token\")\n        authToken = localStorage.getItem(\"auth\")\n    }\n\n    $.ajax({\n        url: urlPrefix + url,\n        type: 'DELETE',\n        dataType: 'json',\n        headers: {\n            'Authorization': \"Bearer \" + authToken,\n        },\n        contentType: 'application/json; charset=utf-8',\n        success: function (result) {\n            callback(result)\n        },\n        error: function (result) {\n            callback(result)\n        }\n    });\n\n}","import React, { useState } from \"react\"\nimport 'antd/dist/antd.css';\nimport \"./style.css\"\nimport { Modal, Button } from 'antd';\nimport {get, post} from \"../util/index\";\n\nexport function JoinChatRoom(props) {\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    const [inputText, setInputText] = useState();\n    const [resultText, setResultText] = useState(\"\");\n\n    const showModal = () => {\n        setIsModalVisible(true);\n    };\n\n    const handleCancel = () => {\n        setIsModalVisible(false);\n        setInputText(\"\");\n        setResultText(\"\");\n    };\n\n    const handleJoin = () => {\n        if (inputText === undefined || inputText === \"\") {\n            setResultText(\"Room Id is invalid.\");\n        } else {\n            console.log(\"Room ID: \", inputText);\n            // filter search result, should fetch all rooms from /chatroom then filter\n            get(\"/chatroom\", (res) => {\n                // filter search result, should fetch all rooms from /chatroom then filter\n                if (res.success) {\n                    const chatRooms = res.payload;\n                    chatRooms.map(chatRoom => {\n                        if (chatRoom.chatroom_id === parseInt(inputText)) {\n                            console.log(chatRoom);\n                            // if there is a matching result\n                            if (chatRoom.chatroom_id === parseInt(inputText)) {\n                                if (chatRoom.chatroom_size === chatRoom.users.length) {\n                                    // Case 1: room has already full\n                                    setResultText(\"Chat room is full.\");\n                                } else if (chatRoom.is_private) {\n                                    // Case 2: room is private\n                                    setResultText(\"Chat room is private.\");\n                                } else {\n                                    // Case 4: user is able to join\n                                    const joinInfo = {\n                                        // FIXME: should be current user's id\n                                        Invitee: \"Current User\",\n                                        chatroom_id: chatRoom.chatroom_id,\n                                    }\n                                    post(\"/chatroom/join\", joinInfo, (res) => {\n                                        if (res.success) {\n                                            let newRoomList = props.chatRoomList;\n                                            let newRoom = res.payload;\n                                            newRoomList.push(newRoom);\n                                            // should add the new room to chat room list\n                                            props.setChatRoomList([...newRoomList]);\n                                            console.log(props.chatRoomList);\n                                            setResultText(\"You joined a new chat room.\");\n                                        }\n                                    });\n                                }\n                            }\n                        }\n                    });\n                }\n            });\n        }\n    }\n\n    return(\n        <div>\n            <Button size={\"middle\"} block={true} onClick={showModal}>\n                Join a Group Chat\n            </Button>\n\n            <Modal title=\"Join a group chat\"\n                   visible={ isModalVisible }\n                   onCancel={ handleCancel }\n                   footer={[]}>\n                <input type=\"number\"\n                       required={true}\n                       value={inputText}\n                       placeholder={\"Room ID (numbers only)\"}\n                       onChange={(event => {\n                            setInputText(event.target.value);\n                       })}/>\n                <Button onClick={handleJoin}>Join</Button><br/>\n                <span>{resultText}</span>\n            </Modal>\n        </div>\n    );\n}","import React, { useState } from \"react\"\nimport 'antd/dist/antd.css';\nimport \"./style.css\"\nimport { post } from \"../util/index\";\nimport {Modal, Button, Checkbox} from 'antd';\n\nexport function CreateChatRoom(props) {\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    const [groupName, setGroupName] = useState(\"\");\n    const [roomSize, setRoomSize] = useState(0);\n    const [isPublic, setIsPublic] = useState(true);\n    const [errorMessage, setErrormessage] = useState(\"\");\n\n    const showModal = () => {\n        setIsModalVisible(true);\n    };\n\n    const clearInputFields = () => {\n        setIsModalVisible(false);\n        setGroupName(\"\");\n        setRoomSize(0);\n        setIsPublic(true);\n    }\n\n    const handleCancel = () => {\n        clearInputFields();\n    };\n\n    const handleCreate = () => {\n        if (roomSize === 0 || groupName === \"\" || roomSize === undefined || groupName === undefined) {\n            setErrormessage(\"Input errors.\");\n        } else {\n            setErrormessage(\"\");\n            let roomInfo = {\n                size: roomSize,\n                chatroom_name: groupName,\n                is_private: !isPublic,\n            }\n            post(\"/chatroom/create\", roomInfo, (res) => {\n                if (res.success) {\n                    let newRoomList = props.chatRoomList;\n                    let newRoom = res.payload;\n                    newRoomList.push(newRoom);\n                    // should add the new room to chat room list\n                    props.setChatRoomList([...newRoomList]);\n                    console.log(props.chatRoomList);\n                }\n            }, props.currentUser.token);\n            clearInputFields();\n        }\n    };\n\n    const handlePublic = (e) => {\n        setIsPublic(e.target.checked);\n        console.log(isPublic);\n    }\n\n    return (\n        <div>\n            <Button size={\"middle\"} block={true} onClick={showModal}>\n                Create a Group Chat\n            </Button>\n\n            <Modal title=\"Create a group chat\"\n                   visible={isModalVisible}\n                   onCancel={handleCancel}\n                   footer={[\n                       <Button key=\"create\" onClick={handleCreate}>\n                           Create\n                       </Button>,\n                   ]}>\n                <input type=\"text\"\n                       value={groupName}\n                       placeholder={\"Group Name\"}\n                       required={true}\n                       onChange={(event => {\n                           setGroupName(event.target.value);\n                       })}/>\n                <input type=\"number\"\n                       min={2}\n                       max={50}\n                       value={roomSize}\n                       placeholder={\"Room Size\"}\n                       required={true}\n                       onChange={(event => {\n                           setRoomSize(event.target.value);\n                       })}/><br/>\n                <Checkbox onChange={handlePublic}>Public chat room</Checkbox><br/>\n                <span style={{color: \"red\"}}>{errorMessage}</span>\n            </Modal>\n        </div>\n    );\n}","export default __webpack_public_path__ + \"static/media/default-group-chat.28ff0cf6.jpg\";","import {message} from \"antd\";\n\n\nexport const error = (msg) => {\n    message.error(msg);\n};\n\nexport const success = (msg) => {\n    message.success(msg);\n};","import React, {useState} from \"react\"\nimport 'antd/dist/antd.css';\nimport \"./style.css\"\nimport defaultPic from \"./default-group-chat.jpg\"\nimport {get} from \"../util\";\nimport {error} from \"../util/message\";\n\nexport function ChatRooms(props) {\n\n    const handleOnClick = (chatRoomId, chatRoomName) => {\n        // set the current room ID\n        console.log('setting', chatRoomId, chatRoomName)\n        console.log(props)\n        let curRoom = props.currentRoom;\n        curRoom.roomId = chatRoomId;\n        curRoom.roomName = chatRoomName;\n        props.setCurrentRoom({...curRoom});\n        // Check if user is the admin of current room\n        get(\"/chatroom\", (res) => {\n            if (res.success) {\n                let room = res.payload.filter((room) =>{\n                    return room.chatroom_id === curRoom.roomId;\n                })[0];\n                if (room) {\n                    props.setUserList(room.users);\n                    props.setCurrentUser({\n                        ...props.currentUser,\n                        isAdmin: room.admins.includes(props.currentUser.username)\n                    });\n                    let currentMessage = props.messages.filter((message)=>message.roomId === curRoom.roomId);\n                    props.setCurMsgList([...currentMessage]);\n                }\n\n            } else {\n                error(res.message);\n            }\n        }, props.currentUser.token);\n\n        // // Set users of the current chat room\n        // get(\"/chatroom/\" + props.currentRoom.roomId + \"/members\", (res) => {\n        //     let users = [];\n        //     res.payload.map(user => {\n        //         users.push(user.username);\n        //     });\n        //     props.setUserList(users);\n        // }, props.currentUser.token);\n    }\n    return (\n        <div>\n            {props.chatRoomList.map(chatroom => {\n                return(\n                    <div className=\"outer-box\" onClick={() => handleOnClick(chatroom.chatroom_id, chatroom.chatroom_name)} key={chatroom.chatroom_id}>\n                        <img className=\"groupImg\" src={defaultPic} alt={\"\"} style={{width: \"50px\"}}/>\n                        <b>{chatroom.chatroom_name}</b>\n                        <p>Room ID: {chatroom.chatroom_id}</p>\n                    </div>\n                );\n            })}\n        </div>\n    );\n\n}","import React, {useEffect, useState} from \"react\"\nimport {get} from \"../util\";\nimport 'antd/dist/antd.css';\nimport \"./style.css\"\nimport {JoinChatRoom} from \"./joinChatRoom\";\nimport {CreateChatRoom} from \"./createChatRoom\";\nimport {ChatRooms} from \"./chatRooms\";\n\nexport function ChatRoomList(props) {\n    // fetch data from backend\n    useEffect(() => {\n        // FIXME: should only fetch chat rooms that contains the current user\n        get(\"/chatroom\", (res) => {\n            if (res.success) {\n                // TODO: should filter the chat rooms that contains the current loggedIn user\n                const filteredChatRooms = [];\n                res.payload.map(chatRoom => {\n                    if (chatRoom.users.includes(props.currentUser.username)) {\n                        filteredChatRooms.push(chatRoom);\n                    }\n                    console.log(chatRoom.users);\n                    console.log(filteredChatRooms);\n                });\n\n                props.setChatRoomList(filteredChatRooms);\n                //console.log(res.payload);\n            }\n        });\n    }, []);\n\n    // TODO: should fetch user info from backend API\n    return (\n        <div className=\"outer-box\">\n            <JoinChatRoom chatRoomList={props.chatroomList}\n                          setChatRoomList={props.setChatRoomList}\n                          currentUser={props.currentUser}\n            /><br/>\n            <CreateChatRoom chatRoomList={props.chatroomList}\n                            setChatRoomList={props.setChatRoomList}\n                            currentUser={props.currentUser}\n            /><br/>\n            <h6>Chats</h6>\n            <ChatRooms\n                chatRoomList={props.chatroomList}\n                currentRoom={props.currentRoom}\n                setCurrentRoom={props.setCurrentRoom}\n                userList={props.userList}\n                setUserList={props.setUserList}\n                currentUser={props.currentUser}\n                setCurrentUser={props.setCurrentUser}\n                messages={props.messages}\n                setCurMsgList={props.setCurMsgList}\n            />\n        </div>\n    );\n}","import React, {useState} from \"react\"\nimport 'antd/dist/antd.css';\nimport {Modal, Button, message} from 'antd';\nimport '../style.css';\nimport {get, del, post} from \"../../util\";\n\nexport function InviteFriend(props) {\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    const [inputText, setInputText] = useState(\"\");\n\n    const showModal = () => {\n        setIsModalVisible(true);\n    };\n\n    const handleCancel = () => {\n        setIsModalVisible(false);\n        setInputText(\"\");\n    };\n\n    const error = (msg) => {\n        message.error(msg);\n    };\n\n    const success = (msg) => {\n        message.success(msg);\n    };\n\n    const handleSearch = () => {\n        let userInfo = {\n            chatroom_id: props.chatRoomId,\n            Invitee: inputText,\n        }\n        post(\"/chatroom/join\", userInfo, (res) => {\n            if (res.success) {\n                success(res.message)\n                get(\"/chatroom/\" + props.chatRoomId + \"/members\", (res) => {\n                    let users = [];\n                    res.payload.map(user => {\n                        users.push(user.username);\n                    });\n                    props.setUserList(users);\n                }, props.currentUser.token);\n            } else {\n                error(res.message);\n            }\n        });\n    }\n\n    return(\n        <div>\n            <Button size={\"middle\"} block={true} onClick={showModal}>\n                Invite a friend\n            </Button>\n\n            <Modal title=\"Invite a friend\"\n                   visible={ isModalVisible }\n                   onCancel={handleCancel}\n                   footer={[\n                       <Button key=\"search\" onClick={ handleSearch }>\n                           Invite\n                       </Button>,\n                   ]}>\n                <input type=\"text\"\n                       value={inputText}\n                       placeholder={\"User Name\"}\n                       onChange={(event => {\n                       setInputText(event.target.value);\n                })}/>\n            </Modal>\n        </div>\n    );\n}","import React, {useEffect, useState} from \"react\"\nimport 'antd/dist/antd.css';\nimport './userList.css';\nimport '../style.css';\nimport {InviteFriend} from \"./inviteFriend\";\nimport {get, del} from \"../../util\";\nimport { message,Button } from 'antd';\n\nexport function UserList(props) {\n    return (\n        <div className=\"outer-box\">\n            <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\"/>\n            <InviteFriend\n                chatRoomId={props.chatRoomId}\n                userList={props.userList}\n                setUserList={props.setUserList}\n                currentUser={props.currentUser}\n            />\n            <User\n                chatRoomId={props.chatRoomId}\n                userList={props.userList}\n                setUserList={props.setUserList}\n                currentUser={props.currentUser}\n            />\n        </div>\n    );\n}\n\nexport function User(props) {\n    const error = (errorMessage) => {\n        message.error(errorMessage);\n    };\n    // fetch data from backend\n\n    const handleBlock = (username) => {\n        console.info(username)\n        del(\"/chatroom/\" + props.chatRoomId + \"/member/\" + username, (res) => {\n            if (res.success) {\n                // modify user list in current chatroom\n                get(\"/chatroom/\" + props.chatRoomId + \"/members\", (res) => {\n                    let users = [];\n                    res.payload.map(user => {\n                        users.push(user.username);\n                    });\n                    props.setUserList(users);\n                }, props.currentUser.token);\n            }else{\n                error(res.message);\n            }\n        }, props.currentUser.token);\n    }\n\n    return (\n        <div>\n            {props.userList.map((user, index) => {\n                return (\n                    <div className=\"outer-box\" style={{padding: 30, position:\"relative\"}} key={index}>\n                        <div >\n                            <i className=\"material-icons prefix\" style={{position:\"absolute\", left:10}}>account_circle</i>\n                            <b style={{position:\"absolute\", left:40}}>{user}</b>\n                            {\n                                props.currentUser.isAdmin && user !== props.currentUser.username ?\n                                    (<Button danger style={{position:\"absolute\", right:10, bottom : 10}}\n                                             onClick={() => handleBlock(user)}>\n                                        block\n                                    </Button>) : null\n\n                            }\n\n                        </div>\n                    </div>\n                );\n            })}\n        </div>\n    );\n\n}","import React from 'react'\nimport \"./ChatHeader.css\"\nimport { Button } from 'react-bootstrap';\n\nclass ChatHeader extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"chat-header\">\n                <div className=\"chat-header-left\">\n                    <h3>\n                        <span className=\"chat-header-room-name\">\n                            {/* Chat Room 0 */}\n                            {this.props.room.name}\n                        </span>\n                        <span className=\"chat-header-room-id\">\n                            {/* Room ID:0001 */}\n                            Room ID: {this.props.room.roomId}\n                        </span>\n                    </h3>\n                </div>\n                <div className=\"chat-header-right\">\n                    <Button variant=\"outline-light\" className=\"chat-header-btn-leave\">Leave</Button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ChatHeader\n","import React, {useState} from 'react'\nimport style from './Message.css'\nimport { TextField } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SaveIcon from '@material-ui/icons/Save';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nclass Message extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // body: this.props.message.body,\n            editing: false,\n            editedMsg: \"\"\n        };\n    }\n\n    saveEditedMsg(e) {\n        this.setState({ editedMsg: e.target.value });\n    }\n\n    render() {\n        return (\n            <div className=\"message\">\n                <div className=\"message-info\">\n                    <h4>{this.props.message.sender}\n                        {/* {this.props.message.username} */}\n                        {/* {this.props.message.time} */}\n                        <span className=\"message-timestamp\">{this.props.message.time}</span>\n                    </h4>\n                    {/* <p className=\"message-body\">{this.props.message.body}</p> */}\n                    {this.state.editing ? (\n                        <TextField\n                            // type=\"text\"\n                            variant=\"outlined\"\n                            size=\"small\" \n                            defaultValue={this.props.message.body}\n                            // ref={this.messageEditor}\n                            onChange={this.saveEditedMsg.bind(this)}\n                        />\n                    ) : (\n                        <p className=\"message-body\">{this.props.message.body}</p>\n                    )}\n                </div>\n\n                {this.props.authority ? (\n                    <div className=\"message-icons\">\n                        {this.state.editing ? (\n                            <IconButton aria-label=\"save\" color=\"inherit\" onClick={() => {this.setState({ body: this.state.editedMsg, editing: !this.state.editing }); this.props.sendEditReq(this.props.index, this.state.editedMsg );}}>\n                                <SaveIcon/>\n                            </IconButton>\n                        ) : (\n                            <IconButton aria-label=\"edit\" color=\"inherit\" onClick={() => {this.setState({ editing: !this.state.editing })}}>\n                                <EditIcon/>\n                            </IconButton>\n                        )}\n                        <IconButton aria-label=\"delete\" color=\"inherit\" onClick={this.props.handleDelete.bind(this)}>\n                            <DeleteIcon/>\n                        </IconButton>\n                    </div>\n                ) : null}\n            </div>\n        )\n    }\n}\n\nexport default Message\n","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap';\nimport styles from \"./ChatBoard.css\"\nimport ChatHeader from './ChatHeader'\nimport Message from './Message'\nimport {Button} from 'antd'\n// import { Button } from 'react-bootstrap'\n// import { PictureOutlined } from '@ant-design/icons'\nimport {IconButto, Snackbar} from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport AlternateEmailIcon from '@material-ui/icons/AlternateEmail';\nimport ImageIcon from '@material-ui/icons/Image';\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions'\nimport {del} from '../../util'\nimport InputEmoji from \"react-input-emoji\";\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n\nclass ChatBoard extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            msg: '',\n            msgDest: \"all\"\n        };\n        this.props = props\n        this.messageInput = React.createRef();\n    }\n\n    sendMessage() {\n        this.setState({msg: \"\"});\n        this.props.sendMessage(JSON.stringify({\n            type: 'send_message',\n            cookie: this.props.user.token,\n            payload: {chatroom_id: this.props.room.roomId, target: this.state.msgDest, content: this.state.msg}\n        }))\n    }\n\n    deleteMessage(index) {\n        this.props.sendMessage(JSON.stringify({\n            type: 'delete_message',\n            cookie: this.props.user.token,\n            payload: {message_id: this.props.messageList[index].id}\n        }));\n    }\n\n    editMessage(index, body) {\n        console.log('edited: new message', index, body);\n        this.props.sendMessage(JSON.stringify({\n            type: 'edit_message',\n            cookie: this.props.user.token,\n            payload: {content: body, message_id: this.props.messageList[index].id}\n        }));\n    }\n\n    leaveRoom() {\n        del(\"/chatroom/\" + this.props.room.id + \"/member/\" + this.props.user.username, {cookie: localStorage.getItem(\"auth\")}, (res) => {\n            if (res.success) {\n                this.props.setRoomList(this.props.roomList.filter(room => {\n                    return room.chatroomId !== this.props.room.roomId;\n                }))\n            }\n        })\n    }\n\n\n    scrollToBottom = () => {\n        this.messagesEnd.scrollIntoView({behavior: \"smooth\"});\n    }\n\n    componentDidMount() {\n        this.scrollToBottom();\n    }\n\n    componentDidUpdate() {\n        this.scrollToBottom();\n    }\n\n\n    render() {\n        return (\n            <div className=\"chat-board\">\n                <ChatHeader room={this.props.room}></ChatHeader>\n\n                <div className=\"chat-messages\">\n                    <div className=\"chat-messages-list\">\n                        {this.props.messageList.map((message, index) => {\n                            return message.dest === 'all' || message.sender === this.props.user.username || message.dest === this.props.user.username ? (\n                                <Message\n                                    authority={this.props.user.isAdmin || this.props.user.username === message.sender}\n                                    message={message} handleDelete={this.deleteMessage.bind(this, index)}\n                                    sendEditReq={(index, body) => this.editMessage(index, body)} key={index}\n                                    index={index}/>\n                            ) : null\n                        })}\n                        <div style={{float: \"left\", clear: \"both\"}}\n                             ref={(ele) => {\n                                 this.messagesEnd = ele;\n                             }}>\n                        </div>\n                    </div>\n                </div>\n\n                <Snackbar open={this.props.notification.on} autoHideDuration={6000}\n                          onClose={(e) => this.props.setNotification({notification: {on: false, body: ''}})}>\n                    <Alert onClose={(e) => this.props.setNotification({notification: {on: false, body: ''}})}\n                           severity={this.props.notification.type}>\n                        {this.props.notification.body}\n                    </Alert>\n                </Snackbar>\n\n                <div className=\"chat-input\">\n                    <AlternateEmailIcon className=\"chat-input-item\" fontSize=\"large\"/>\n                    <select className=\"chat-input-item\" defaultValue=\"all\"\n                            onChange={(e) => this.setState({msgDest: e.target.value})}>\n                        <option value=\"all\">All</option>\n                        {this.props.userList.map((user, index) => {\n                            return this.props.user.username !== user ? (\n                                <option value={user} key={index}>{user}</option>\n                            ) : null\n                        })}\n                    </select>\n                    {/* <input className=\"chat-input-item\" type=\"text\" ref={this.messageInput} placeholder={`message`} /> */}\n                    <InputEmoji\n                        value={this.state.msg}\n                        onChange={(v) => this.setState({msg: v})}\n                        cleanOnEnter\n                        onEnter={this.sendMessage.bind(this)}\n                        placeholder=\"Enter a message\"\n                    />\n                    <Button className=\"chat-input-item\" variant=\"outline-light\" onClick={this.sendMessage.bind(this)}\n                            disabled={this.props.user.banned}>Send</Button>\n\n                </div>\n\n            </div>\n        )\n    }\n\n}\n\nexport default ChatBoard\n","import React, {useEffect, useState} from \"react\"\nimport 'antd/dist/antd.css';\nimport \"./style.css\"\nimport {useHistory} from \"react-router-dom\";\nimport {ChatRoomList} from \"./chatRoomList\";\nimport {UserList} from \"./userList/userList\";\nimport ChatBoard from \"./ChatRoom/ChatBoard\";\nimport {Button, Modal} from \"antd\";\nimport {get} from \"../util\";\nlet intervalId;\nexport function MainView(props) {\n    const [ws, setWs] = useState(undefined);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    // User joined chat rooms\n    const [chatRoomList, setChatRoomList] = useState([]);\n    const [userList, setUserList] = useState([]);\n    // Current Room that needs to be rendered\n    const [currentRoom, setCurrentRoom] = useState(\n        {\n            roomId: undefined,\n            roomName: undefined,\n        }\n    );\n    // Messages in current room that needs to be rendered\n    const [messages, setMessages] = useState([]);\n    //const [userId, setUserId] = useState(0);\n\n    const [curUser, setCurUser] = useState({\n        username: props.loggedInUser.username,\n        token: props.loggedInUser.token,\n        isAdmin: false,\n        banned: false,\n    })\n\n    const [curMsgList, setCurMsgList] = useState([]);\n    const [notification, setNotification] = useState({on: false, type: \"warning\", body: ''})\n\n    useEffect(() => {\n        createWebSocket();\n    }, []);\n\n    const showProfileModal = () => {\n        setIsModalVisible(true);\n    };\n\n    const handleLogout = () => {\n        props.setLoggedInUser({\n            username: \"\",\n            token: \"\",\n            age: 0,\n            university: \"\",\n            interest: [], // list of strings\n            chatRooms: [], //  list of json objects\n        })\n    };\n\n    const handleCancel = () => {\n        setIsModalVisible(false);\n    };\n\n    const fetchData = () => {\n        get(\"/chatroom\", (res) => {\n            if (res.success) {\n                // TODO: should filter the chat rooms that contains the current loggedIn user\n                const filteredChatRooms = [];\n                res.payload.map(chatRoom => {\n                    if (chatRoom.users.includes(props.currentUser.username)) {\n                        filteredChatRooms.push(chatRoom);\n                    }\n                    console.log(chatRoom.users);\n                    console.log(filteredChatRooms);\n                });\n\n                setChatRoomList(filteredChatRooms);\n            }\n        });\n    }\n\n    const createWebSocket = () => {\n        //  + window.location.port\n        console.log(\"connecting\");\n        //TODO: change ws to wss in production\n        let ws = new WebSocket(\"wss://\" + window.location.hostname + \":\" + window.location.port + \"/chatapp\");\n        setWs(ws)\n        setInterval(()=>{\n            ws.send(JSON.stringify({type:\"heart_beat\", cookie:props.loggedInUser.token}))\n        }, 30000)\n        ws.onopen = function () {\n            console.log(\"connected\");\n            ws.send(JSON.stringify({type: \"register_session\", cookie: props.loggedInUser.token}));\n        }\n        ws.onerror = function () {\n            createWebSocket();\n        };\n        ws.onclose = function (e) {\n            console.log('websocket closing: ' + e.code + ' ' + e.reason + ' ' + e.wasClean)\n        }\n        ws.onmessage = function (event) {\n            let msg = JSON.parse(event.data);\n            console.log(msg);\n            switch (msg.type) {\n                case \"notification\":\n                    setNotification({on: true, type: msg.payload.level, body: msg.payload.message});\n                    break;\n                case \"new_message\":\n                    messages.push({ roomId: msg.payload.chatroom_id, id: msg.payload.message_id, dest: msg.payload.target, sender: msg.payload.sender, time: new Date().toTimeString().substring(0, 9) + new Date().toDateString(), body: msg.payload.content })\n                    let currentMessage = messages.filter((message)=>message.roomId === currentRoom.roomId)\n                    setCurMsgList([...currentMessage])\n                    setMessages([...messages])\n                    break;\n                case \"edit_message\":\n                    messages.forEach(ele => {\n                        if (ele.id === msg.payload.message_id) {\n                            ele.body = msg.payload.content;\n                        }\n                    });\n                    console.log(\"edited:\", messages);\n                    setMessages([...messages]);\n                    let editMsgList = messages.filter(message => { return message.roomId === currentRoom.roomId });\n                    console.log(editMsgList);\n                    setCurMsgList([...editMsgList]);\n                    break;\n                case \"delete_message\":\n                    let delMsgList = messages;\n                    delMsgList = delMsgList.filter(message => { return message.id !== msg.payload.message_id; });\n                    setMessages(delMsgList);\n                    delMsgList = delMsgList.filter(message => { return message.roomId === currentRoom.roomId });\n                    setCurMsgList(delMsgList);\n                    break;\n                case \"update_info\":\n                    get(\"/chatroom\", (res) => {\n                        if (res.success) {\n                            // TODO: should filter the chat rooms that contains the current loggedIn user\n                            setChatRoomList(res.payload);\n                            if (currentRoom.roomId !== undefined) {\n                                let room = res.payload.filter((room) =>{\n                                    return room.chatroom_id === currentRoom.roomId;\n                                })[0];\n                                if (room) {\n                                    setUserList(room.users);\n                                    setCurUser({\n                                        ...curUser,\n                                        isAdmin: room.admins.includes(curUser.username)\n                                    })\n                                }\n                            }\n                        }\n                    }, curUser.token);\n                    break;\n            }\n        }\n        return ws;\n    }\n\n    const sendMessage = (msg) => {\n        console.log(JSON.parse(msg))\n        ws.send(msg);\n    }\n\n    return (\n        <div className=\"chat-page\">\n            <div className=\"nav-bar\">\n                <div className=\"logo-tab\">QuickChat</div>\n                <div className=\"logout-tab\" onClick={handleLogout}>Logout</div>\n                <div className=\"profile-tab\" onClick={showProfileModal}>Profile</div>\n            </div>\n            <div className=\"chat-wrapper\">\n                <div className=\"chat-room-list\">\n                    <ChatRoomList chatroomList={chatRoomList}\n                                  currentRoom={currentRoom}\n                                  setChatRoomList={setChatRoomList}\n                                  setCurrentRoom={setCurrentRoom}\n                                  userList={userList}\n                                  setUserList={setUserList}\n                                  currentUser={curUser}\n                                  setCurrentUser={setCurUser}\n                                  messages={messages}\n                                  setCurMsgList={setCurMsgList}\n                    />\n                </div>\n                <div className=\"chat-main outer-box-chatroom\">\n                    {currentRoom.roomId !== undefined ? (\n                        <ChatBoard user={curUser}\n                                   room={currentRoom}\n                                   userList={userList}\n                                   sendMessage={sendMessage}\n                                   messageList={curMsgList}\n                                   notification={notification}\n                                   setNotification={setNotification}\n                                   roomList={chatRoomList}\n                                   setRoomList={setChatRoomList}/>\n                    ) : null}\n                </div>\n                <div className=\"chat-user-list\">\n                    {/*FIXME: check if this change is valid*/}\n                    <UserList chatRoomId={currentRoom.roomId}\n                              currentUser={curUser}\n                              userList={userList}\n                              setUserList={setUserList}\n                    />\n                </div>\n            </div>\n\n            <Modal title=\"My Profile\"\n                   visible={isModalVisible}\n                   onCancel={handleCancel}\n                   footer={[]}>\n                <p>Name: {props.loggedInUser.username}</p>\n                <p>Age: {props.loggedInUser.age}</p>\n                <p>University: {props.loggedInUser.university}</p>\n                <p>Interests: {props.loggedInUser.interests}</p>\n            </Modal>\n        </div>\n\n    );\n}","import './landing.css';\nimport React from \"react\";\nimport {Message, Icon} from \"semantic-ui-react\";\nimport {get, del, post} from \"../util/index\";\nimport {error, success} from \"../util/message\";\n\nexport class Landing extends React.Component {\n    constructor(props) {\n        super(props);\n        localStorage.setItem(\"auth\", \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJxdWlja2NoYXQiLCJ1c2VybmFtZSI6InRlc3QifQ.ouJvL4eRZXfG9V_6PvGWby7ho4sN97hRrQ4hTNEJTig\")\n        this.state = {\n            isLogginActive: true,\n        };\n        this.container = React.createRef();\n    }\n\n    componentDidMount() {\n        this.rightSide.classList.add(\"right\");\n    }\n\n    changeState() {\n        const {isLogginActive} = this.state;\n        if (isLogginActive) {\n            this.rightSide.classList.remove(\"right\");\n            this.rightSide.classList.add(\"left\");\n        } else {\n            this.rightSide.classList.remove(\"left\");\n            this.rightSide.classList.add(\"right\");\n        }\n        this.setState(prevState => ({isLogginActive: !prevState.isLogginActive}));\n    }\n\n\n    render() {\n        const {isLogginActive} = this.state;\n        const current = isLogginActive ? \"Register\" : \"Login\";\n        const currentActive = isLogginActive ? \"login\" : \"register\";\n        return (\n            <div>\n                <div className=\"App\">\n                    <div className=\"login\">\n                        <div className=\"container\" ref={ref => (this.container = ref)}>\n                            {isLogginActive && (\n                                <Login history={this.props.history} state={this.state}\n                                       containerRef={ref => (this.current = ref)}\n                                       setLoggedInUser={this.props.setLoggedInUser}\n                                       loggedInUser={this.props.loggedInUser}/>\n                            )}\n                            {!isLogginActive && (\n                                <Register history={this.props.history}\n                                          containerRef={ref => (this.current = ref)} addUser={this.addUser}/>\n                            )}\n                        </div>\n                        <RightSide\n                            current={current}\n                            currentActive={currentActive}\n                            containerRef={ref => (this.rightSide = ref)}\n                            onClick={this.changeState.bind(this)}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst RightSide = props => {\n    return (\n        <div\n            className=\"right-side\"\n            ref={props.containerRef}\n            onClick={props.onClick}\n        >\n            <div className=\"inner-container\">\n                <div className=\"text\">{props.current}</div>\n            </div>\n        </div>\n    );\n};\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: {},\n            password: '',\n            username: '',\n            isLoggedIn: false,\n        }\n        this.loginFunc = this.loginFunc.bind(this);\n    }\n\n    loginFunc() {\n        let user = {\n            username: this.state.username,\n            password: this.state.password\n        }\n        post(\"/user/login\", user, (res) => {\n            if (res.success) {\n                console.log(this.props)\n                this.props.setLoggedInUser({\n                    username: user.username,\n                    token: res.payload.cookie\n                })\n                let token = res.payload.cookie\n                get(\"/user/\" + user.username, (res) => {\n                    if (res.success) {\n                        this.props.setLoggedInUser({\n                            username: user.username,\n                            token,\n                            age: res.payload.age,\n                            school: res.payload.school,\n                            interests: res.payload.interests.join(', ')\n                        })\n                    } else {\n                        console.log(res)\n                        error(res.responseJSON.message)\n                    }\n                }, this.props.loggedInUser.token)\n            } else {\n                error(res.responseJSON.message)\n            }\n        });\n\n\n    };\n\n    render() {\n        let message;\n        if (this.state.isLoggedIn === true) {\n            message = <Message icon error>\n                <Icon name='warning'/>\n                <Message.Content>\n                    <Message.Header>Username Not Found</Message.Header>\n                    The username you supplied was not found\n                </Message.Content>\n            </Message>\n        }\n\n        return (\n            <div className=\"base-container\" ref={this.props.containerRef}>\n                <div className=\"header\">Login</div>\n                <div className=\"content\">\n                    <div className=\"form\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"username\">Username</label>\n                            <input type=\"text\" name=\"username\" id=\"username\" placeholder=\"username\"\n                                   onChange={e => {\n                                       this.setState({username: e.target.value})\n                                   }}/>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"password\">Password</label>\n                            <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"password\"\n                                   onChange={e => {\n                                       this.setState({password: e.target.value})\n                                   }}/>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"footer\">\n                    <button type=\"button\" className=\"btn\"\n                            onClick={this.loginFunc}>\n                        Login\n                    </button>\n                </div>\n                {message}\n            </div>\n        );\n    }\n}\n\nclass Register extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            interest: '',\n            school: '',\n            age: '',\n            password: '',\n            confirmPassword: '',\n            errorMsg: '',\n            error: false,\n            success: false\n        }\n        this.register = this.register.bind(this)\n\n    }\n\n    register() {\n        let msg = ''\n        let pwd = this.state.password;\n        let confirmPwd = this.state.confirmPassword;\n\n        if (this.state.username === '') {\n            msg += 'user name cant be null \\n'\n            this.setState({errorMsg: msg, error: true, success: false})\n            return\n        }\n        if (pwd !== confirmPwd) {\n            msg += \"password and password confirmation must be same\\n\"\n            this.setState({errorMsg: msg, error: true, success: false})\n            return\n        }\n        // /user/create\n        //“Payload”:{\n        //                         “username”: String,\n        //                         “password”: String,\n        //                         “age”: int,\n        //                         “school”: String,\n        //                         “interest”: []String\n        //                     }\n        let newUser = {\n            id: 11,\n            username: this.state.username,\n            password: this.state.password,\n            age: this.state.age,\n            school: this.state.school,\n            interest: [this.state.interest]\n        }\n        post(\"/user/create\", newUser, (res) => {\n            if (res.success) {\n                success(\"User has ben register successfully!\")\n            }else{\n                console.log(res)\n                error(res.responseJSON.message)\n            }\n        });\n    }\n\n\n    render() {\n        let emsg;\n        if (this.state.error === true) {\n            emsg = registerError(this.state.errorMsg);\n        }\n        let smsg;\n        if (this.state.success === true) {\n            smsg = registerSuccess();\n        }\n        return (\n            <div className=\"base-container\" ref={this.props.containerRef}>\n                <div className=\"header\">Register</div>\n                <div className=\"content\">\n                    <form>\n                        <div className=\"form\">\n                            <div className=\"form-group\">\n                                <label htmlFor=\"username\">Username</label>\n                                <input type=\"text\" name=\"username\" placeholder=\"username\" onChange={e => {\n                                    this.setState({username: e.target.value})\n                                }}/>\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"email\">Interest</label>\n                                <input type=\"email\" name=\"email\" placeholder=\"interest\"\n                                       onChange={e => {\n                                           this.setState({interest: e.target.value})\n                                       }}/>\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"school\">School</label>\n                                <input type=\"text\" name=\"school\" placeholder=\"school\" onChange={e => {\n                                    this.setState({school: e.target.value})\n                                }}/>\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"age\">Age</label>\n                                <input type=\"text\" name=\"school\" placeholder=\"age\" onChange={e => {\n\n                                    this.setState({age: e.target.value})\n                                }}/>\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"password\">Password</label>\n                                <input type=\"password\" name=\"password\" placeholder=\"password\" onChange={e => {\n                                    this.setState({password: e.target.value})\n                                }}/>\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"password\">Confirmed Password</label>\n                                <input type=\"password\" name=\"confirmPassword\" placeholder=\"confirmedPassword\"\n                                       onChange={e => {\n                                           this.setState({confirmPassword: e.target.value})\n                                       }} />\n                            </div>\n                        </div>\n\n                    </form>\n                </div>\n                <div className=\"footer\">\n                    <button type=\"button\" className=\"btn\" onClick={this.register}>\n                        Register\n                    </button>\n                    {emsg}\n                    {smsg}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst UserNotFound = () => {\n    return (\n        <Message icon error>\n            <Icon name='warning'/>\n            <Message.Content>\n                <Message.Header>Username Not Found</Message.Header>\n                The username you supplied was not found, therefore no repositories can be listed!\n            </Message.Content>\n        </Message>\n    );\n}\n\nconst registerSuccess = () => {\n    return (\n        <Message icon success>\n            <Message.Content>\n                <Message.Header>Register Success</Message.Header>\n                Login with username and password!\n            </Message.Content>\n        </Message>\n    );\n}\n\nconst registerError = (msg) => {\n    return (\n        <Message icon error>\n            <Icon name='warning'/>\n            <Message.Content>\n                <Message.Header>Register Error</Message.Header>\n                {msg}\n            </Message.Content>\n        </Message>\n    );\n}\n\n\nexport default Landing;\n\n\n\n","import './App.css';\nimport {BrowserRouter as Router, Route, Switch, useHistory} from \"react-router-dom\";\nimport {MainView} from \"./ChatPage/mainView\";\nimport {Landing} from \"./Landing/landing\";\nimport {useState} from \"react\";\n\n\nfunction App() {\n    const [loggedInUser, setLoggedInUser] = useState({\n        username: \"\",\n        token: \"\",\n        age: 0,\n        university: \"\",\n        interest: [], // list of strings\n        chatRooms: [], //  list of json objects\n    });\n    const [history, setHistory] = useState(useHistory());\n    return (\n\n        <div className=\"App\">\n            {loggedInUser.token === undefined || loggedInUser.token === \"\" ?\n                <Landing loggedInUser={loggedInUser}\n                         setLoggedInUser={setLoggedInUser}\n                         history={history}\n                         setHistory={setHistory}/> :\n                <MainView loggedInUser={loggedInUser}\n                          setLoggedInUser={setLoggedInUser}/>}\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}